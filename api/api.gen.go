// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedImage defines model for FeedImage.
type FeedImage struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// FeedItem defines model for FeedItem.
type FeedItem struct {
	Date     time.Time  `json:"date"`
	Image    *FeedImage `json:"image,omitempty"`
	Language string     `json:"language"`
	Link     string     `json:"link"`
	Source   string     `json:"source"`
	Summary  string     `json:"summary"`
	Title    string     `json:"title"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/search/feed/{query})
	GetV1SearchFeedQuery(ctx echo.Context, query string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1SearchFeedQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchFeedQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "query" -------------
	var query string

	err = runtime.BindStyledParameterWithLocation("simple", false, "query", runtime.ParamLocationPath, ctx.Param("query"), &query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchFeedQuery(ctx, query)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/search/feed/:query", wrapper.GetV1SearchFeedQuery)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RUzW7bPBB8FWG/78iIUoqiAW89tIXRQ1uk6CXIgZXWFhPxJ8uVAcPQuxekFFutlf6c",
	"RHCHM8Phro7QeBu8Q8cR1BFi06HVefmOyFNaBPIBiQ3m7ca3mL58CAgKjGPcIcEowGKMercsRibjdjCO",
	"AgifBkPYgro7AcVEdi+e8f77AzacuN4jths7s/1sgA33ayICBur/LJ5AYiZ5UZnRXgq3mrPu1pPVDCpv",
	"XLGx6SYXZsyz+/8Jt6DgP3lOWs4xy/M1RwG9drthPUABvXGPq4XoB2rWz8TBWk2H1dpLKf6S1gQ7U81G",
	"TrIL12IK6DLTxGnc1i8eDzbR95qxLb52xj0WV8Vt5iveft6AgD1SNN6Bgrqsklsf0OlgQMGrsiqvQUDQ",
	"3OVXkftaRtTUdHKL2Mrj04B0GFNph5w+6Q01G+82LSj4gPytvs0HUvpfEjrzkbbISBHU3RFMEk8aIMBp",
	"myw/zchzPEwDinlk1qK8T+AYvItTA11X1TRBjtFlazqE3jTZnHyI6cbHBZ9htPGvWij163gKXhPpw5R7",
	"i7EhE3hK89PHhHr9jzZ+pz79JFakNo6RnO6LW6Q9UnECJmjMe1PSeWihYw5RSTm1VWnm9uDUHSVjZLmv",
	"YRRLuJKy943uOx9Z3VQ31aJeX78pq7Iq67lwP/4IAAD//8bBzMHpBAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
