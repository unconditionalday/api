// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedDetails defines model for FeedDetails.
type FeedDetails struct {
	Similarities *[]FeedItem `json:"similarities,omitempty"`
	Source       *FeedItem   `json:"source,omitempty"`
}

// FeedImage defines model for FeedImage.
type FeedImage struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// FeedItem defines model for FeedItem.
type FeedItem struct {
	*string  `json:",omitempty"`
	Date     time.Time  `json:"date"`
	Id       string     `json:"id"`
	Image    *FeedImage `json:"image,omitempty"`
	Language string     `json:"language"`
	Link     string     `json:"link"`
	Source   string     `json:"source"`
	Summary  string     `json:"summary"`
	Title    string     `json:"title"`
}

// SearchContextDetails defines model for SearchContextDetails.
type SearchContextDetails struct {
	Language  string `json:"language"`
	Link      string `json:"link"`
	Summary   string `json:"summary"`
	Thumbnail string `json:"thumbnail"`
	Title     string `json:"title"`
}

// ServerBuildVersion defines model for ServerBuildVersion.
type ServerBuildVersion struct {
	Commit  string `json:"commit"`
	Version string `json:"version"`
}

// ServerVersion defines model for ServerVersion.
type ServerVersion struct {
	Build  ServerBuildVersion   `json:"build"`
	Source SourceReleaseVersion `json:"source"`
}

// SourceReleaseVersion defines model for SourceReleaseVersion.
type SourceReleaseVersion struct {
	LastUpdatedAt string `json:"lastUpdatedAt"`
	Version       string `json:"version"`
}

// GetV1VersionJSONBody defines parameters for GetV1Version.
type GetV1VersionJSONBody map[string]interface{}

// GetV1VersionJSONRequestBody defines body for GetV1Version for application/json ContentType.
type GetV1VersionJSONRequestBody GetV1VersionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/search/context/{query})
	GetV1SearchContextQuery(ctx echo.Context, query string) error
	// Your GET endpoint
	// (GET /v1/search/feed/similarities/{feedID})
	GetV1SearchFeedSimilarities(ctx echo.Context, feedID string) error

	// (GET /v1/search/feed/{query})
	GetV1SearchFeedQuery(ctx echo.Context, query string) error
	// Your GET endpoint
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1SearchContextQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchContextQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "query" -------------
	var query string

	err = runtime.BindStyledParameterWithLocation("simple", false, "query", runtime.ParamLocationPath, ctx.Param("query"), &query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchContextQuery(ctx, query)
	return err
}

// GetV1SearchFeedSimilarities converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchFeedSimilarities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "feedID" -------------
	var feedID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "feedID", runtime.ParamLocationPath, ctx.Param("feedID"), &feedID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feedID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchFeedSimilarities(ctx, feedID)
	return err
}

// GetV1SearchFeedQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchFeedQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "query" -------------
	var query string

	err = runtime.BindStyledParameterWithLocation("simple", false, "query", runtime.ParamLocationPath, ctx.Param("query"), &query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchFeedQuery(ctx, query)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/search/context/:query", wrapper.GetV1SearchContextQuery)
	router.GET(baseURL+"/v1/search/feed/similarities/:feedID", wrapper.GetV1SearchFeedSimilarities)
	router.GET(baseURL+"/v1/search/feed/:query", wrapper.GetV1SearchFeedQuery)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX33ObRhD+VzzXPhKBJCRZvDVNmvH0oZOkyUwn44cDFnHS/YC7Axl59L937kCAIhRj",
	"u3nokzG32v32+3b3lkcUCZYJDlwrFDwiFaXAsH18L6WQ5iGTIgOpCdjXkYjB/NVVBihAhGvYgERHBzFQ",
	"Cm/6h0pLwjfoeHSQhLwgEmIUfGsNndrZvXOyF+EWIo0c9PBGaZFRskm1cUdiFCCWJGord+HtVOiF9fkH",
	"QPwONCZUXeJUhBGKJTn9TzQw+/CrhAQF6Be3y9xt0naNxzsNzKTTYMJS4uoKJE/NSLxmaX6oyrWFpEQh",
	"IxgfxsQhmppA/WzGMbKNE1zu/HyZx0vRMnLHGhHO+WjCXGjjoELSpzUzRiesIwXDNKx4lBId5Yeig2fy",
	"vkB3CWDY57I4pFTTRTLFVQ0yxtqmlQjJsEaBffFGEwYdi12uxsm4SMSf4pWcL6b7glQ2EjkR+6S01vDo",
	"IIr5phhuCQdRwneDB10NXR4VjGFZDZ5dE/g7IUnc6tj5a9C0sXvQG4ZHar7bwz5hif+wyedgY38GLKP0",
	"d8E1POir3fpCpn5ER1qwkGNCX0PWiacTOy1dnfceVfddMw9mPY7CJE0kxRDu1ljtGgplCfJtQWj8FaQi",
	"gg+NZcaIHlvc/q2m81VZ7At/ldkYZed4jAO2zx/kZqG9slQaHb/nrUHTuT2j5iKbkfNkufFLtVViKQ77",
	"HjFXOQlNjKcadgDO6Dn+2Vp9AgpYQfvr77hoW6qGc8HE80jwmc/jiDABMgprEoZADDSY0l8y08rxb6PL",
	"RBw2tPJWGaWHffiSMtn4s13GksUa1iq8LJOyTf0cXp+joezGUZVLTtYRhlWu5NIENzOcJ6J3G6IvPBI8",
	"JpoIjmmvXgM0nXimEEQGHGcEBWg+8SYz5KAM69RS6pZTV9k+d6O60d3HvABZHc3pBiwSowE27u8MpA+g",
	"v07PZsNH8wPrVWIGGqRCwbdHRAwEEwk5iGNmoOaNZUeglgU4zco2NMvujbHKBFd1Dcw8rx4VXAO36HCW",
	"URJZfO5W1bp2/n7cNgMDzlIcg4okyXRN419/GhYX/2Hkei8dCHXHNUiO6U3dVzcnw+HqWEXztV8ud3Kh",
	"k6R21xM0AYjd/grpPppXd+9GaWuWgM/9/fMnCtFfG6/y79cBz4/e4vjmE+QFmAneajSW0/buRf+IQt58",
	"eP/3DfA4E4Rf68eouA3hgZXzfF8urY+ni74m/XlVP6DkM/rS8PmxbbVXiPa6D47/UyvBsgCe7mZsNt0t",
	"Rgr7gmnW6Nq7gq5r2d0Usq7wtyKunsXb+Q1zbO6unzZN+5vAFe1f1HSiiCDzy3UR5rNDk4ay0Wpp7Mcf",
	"SrXOVOC6OCOTon8lTmJcueUUHZ2+aeC6VESYpkLp4Na79Xrn09lq4k28ybQ5uL+yGXg7tva2PBQ+8dDx",
	"+G8AAAD//4T3I/yJEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
