// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FeedImage defines model for FeedImage.
type FeedImage struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// FeedItem defines model for FeedItem.
type FeedItem struct {
	Date     time.Time  `json:"date"`
	Image    *FeedImage `json:"image,omitempty"`
	Language string     `json:"language"`
	Link     string     `json:"link"`
	Source   string     `json:"source"`
	Summary  string     `json:"summary"`
	Title    string     `json:"title"`
}

// SearchContextDetails defines model for SearchContextDetails.
type SearchContextDetails struct {
	Language  string `json:"language"`
	Link      string `json:"link"`
	Summary   string `json:"summary"`
	Thumbnail string `json:"thumbnail"`
	Title     string `json:"title"`
}

// ServerBuildVersion defines model for ServerBuildVersion.
type ServerBuildVersion struct {
	Commit  string `json:"commit"`
	Version string `json:"version"`
}

// ServerVersion defines model for ServerVersion.
type ServerVersion struct {
	Build  ServerBuildVersion   `json:"build"`
	Source SourceReleaseVersion `json:"source"`
}

// SourceReleaseVersion defines model for SourceReleaseVersion.
type SourceReleaseVersion struct {
	LastUpdatedAt string `json:"lastUpdatedAt"`
	Version       string `json:"version"`
}

// GetV1SearchFeedQueryParams defines parameters for GetV1SearchFeedQuery.
type GetV1SearchFeedQueryParams struct {
	BySimilarity *bool `json:"bySimilarity,omitempty"`
}

// GetV1VersionJSONBody defines parameters for GetV1Version.
type GetV1VersionJSONBody map[string]interface{}

// GetV1VersionJSONRequestBody defines body for GetV1Version for application/json ContentType.
type GetV1VersionJSONRequestBody GetV1VersionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/search/context/{query})
	GetV1SearchContextQuery(ctx echo.Context, query string) error

	// (GET /v1/search/feed/{query})
	GetV1SearchFeedQuery(ctx echo.Context, query string, params GetV1SearchFeedQueryParams) error
	// Your GET endpoint
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1SearchContextQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchContextQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "query" -------------
	var query string

	err = runtime.BindStyledParameterWithLocation("simple", false, "query", runtime.ParamLocationPath, ctx.Param("query"), &query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchContextQuery(ctx, query)
	return err
}

// GetV1SearchFeedQuery converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1SearchFeedQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "query" -------------
	var query string

	err = runtime.BindStyledParameterWithLocation("simple", false, "query", runtime.ParamLocationPath, ctx.Param("query"), &query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1SearchFeedQueryParams
	// ------------- Optional query parameter "bySimilarity" -------------

	err = runtime.BindQueryParameter("form", true, false, "bySimilarity", ctx.QueryParams(), &params.BySimilarity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bySimilarity: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1SearchFeedQuery(ctx, query, params)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/search/context/:query", wrapper.GetV1SearchContextQuery)
	router.GET(baseURL+"/v1/search/feed/:query", wrapper.GetV1SearchFeedQuery)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SXzW7jNhDHXyVge9RasqPEsW7ddrsIeija7S5QLHKgpJHEiF8mR3KcQO9eUJItOZaz",
	"ziJ76CmGOJz58zcfZJ5IooRWEiRaEj0RmxQgaPvzgzHKuB/aKA0GGbSfE5WC+4tbDSQiTCLkYEjjEQHW",
	"0ny8aNEwmZOm8YiBdcUMpCT6ujf0Omd33s5exfeQIPHIwzuLSnOWF+jcsZRERGSZvTdlfDNXeNX6/B0g",
	"vRV9yEOVyJBPKfFIZfi3FTojr3dypjzK461MCobJ+rEa5CGIY3UpxVZcpoygSKL2wztkwjE5Usx2R/zZ",
	"QEYi8pM/5MzvE+YPLBqPcCrzajoVHuFMlpMLVlUmmd5jKyGo2U6unUL9DGlnNrjqhezDjlR7HaAzwZcb",
	"2GQiCx/y9SW0YT8BNUnxq5IID/gbIGXcHifhOyG9RKKoRCwp42/BaUdnj2vwPkJ1t/c7ferzEGZFZjiF",
	"uFxRW/YITQ3mfcV4+gWMZUpOTQIhGB6faDpGeIP8cllXmypc6jZGPTg+x4HYrB9MfoVBXVskzXNuvZrB",
	"7QGao9Oc2dTXeVjbe6uu1eNmBOYkk9jF+FavTsg5aL8X97ZWfwMHamG/+xmLfUt1co5IvA5CKEKZJkwo",
	"MEncQZgSMdFgFj9r18rpL2eXiXrM+TZYas4fN/H3lEkeLkotsqsVrGx8XCb1/uiH8saMpk53Hqq1kWyV",
	"UFiurbl2wd34lpkaXUnks0yUTBkyJSkf1WtE5rPAFYLSIKlmJCKXs2C2IB7RFIsWqV/Pfdv2uZ90je4/",
	"rSsw28at5tAqcTmgzv2tk/QR8Mv8YDb85Ta0Xg0VgGAsib4+EeYkuEjEI5IKJ3XdWw4A0VTg9a+EqVl2",
	"54ytVtJ2NbAIgm5USATZqqNac5a0+vx72+V18Pdy20wMuBZxCjYxTGOH8c8/HMWrN4zcPYUmQt1KBCMp",
	"v+j66mJnOF0dy+RyFdbXpbnCLOvcjRKaAaSvyaa78V9K5S55fS7j7ScmGKeGoft6lMJYKQ5UvkEOGYKw",
	"Z71X3OOo2XcWNYZu/1cJhesKZFEuxGJedk/SH9JTfZ2MBuHp2hjmlQsAFt+rdPsqbodzrukn6A/r6fF9",
	"dCL342cX+VdV5uLjh38uQKZaMXlqFKsqAR3WqypeLx77Y9g2Wpea9v8AUiBqG/k+1WxWjQfzLKVbv56T",
	"xhubRr7PVUJ5oSxGN8FNMFqfL5azYBbM5v3C3Yn7KSjFKriXsQpZQJrmvwAAAP//A98fT4INAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
